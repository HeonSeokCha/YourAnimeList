package com.chs.youranimelist.presentation.browse.animeimport androidx.compose.animation.animateContentSizeimport androidx.compose.animation.core.Springimport androidx.compose.animation.core.springimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.clickableimport androidx.compose.foundation.combinedClickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyRowimport androidx.compose.foundation.lazy.grid.GridCellsimport androidx.compose.foundation.lazy.grid.LazyVerticalGridimport androidx.compose.foundation.lazy.grid.itemsimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.verticalScrollimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowDownwardimport androidx.compose.material.icons.filled.ArrowUpwardimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.LinkAnnotationimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextOverflowimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport be.digitalia.compose.htmlconverter.htmlToAnnotatedStringimport com.chs.youranimelist.domain.model.AnimeDetailInfoimport com.chs.youranimelist.domain.model.AnimeInfoimport com.chs.youranimelist.domain.model.AnimeRelationInfoimport com.chs.youranimelist.domain.model.AnimeThemeInfoimport com.chs.youranimelist.domain.model.TagInfoimport com.chs.youranimelist.presentation.UiConstimport com.chs.youranimelist.presentation.UiConst.GENRE_COLORimport com.chs.youranimelist.presentation.colorimport com.chs.youranimelist.presentation.common.ItemAnimeSmallimport com.chs.youranimelist.presentation.common.ItemSpoilerDialogimport com.chs.youranimelist.presentation.common.shimmerimport com.chs.youranimelist.presentation.getIdFromLinkimport com.chs.youranimelist.presentation.isHrefContentimport com.chs.youranimelist.presentation.isNotEmptyValueimport com.chs.youranimelist.presentation.toCommaFormatimport com.chs.youranimelist.presentation.ui.theme.Red500import com.chs.youranimelist.res.Resimport com.chs.youranimelist.res.lorem_ipsumimport org.jetbrains.compose.resources.stringResourceimport kotlin.collections.get@Composablefun AnimeOverViewScreen(    state: AnimeDetailState,    onIntent: (AnimeDetailIntent) -> Unit) {    val scrollState = rememberScrollState()    val animeDetailState = state.animeDetailInfo    val animeThemeState = state.animeThemes    Column(        modifier = Modifier            .fillMaxSize()            .padding(                start = 4.dp,                end = 8.dp,                bottom = 16.dp            )            .verticalScroll(scrollState)    ) {        if (animeDetailState == null) {            ItemLoading()        } else {            AnimeGenreChips(                list = animeDetailState.genres ?: List(3) { null },                onIntent = onIntent            )            AnimeDescription(                description = animeDetailState.description,                expanded = state.isDescExpand,                onIntent = onIntent            )            AnimeScoreInfo(animeDetailInfo = animeDetailState)            AnimeSummaryInfo(                animeDetailInfo = animeDetailState,                onIntent = onIntent            )            if (animeDetailState.tags != null) {                ItemAnimeTags(                    tags = animeDetailState.tags,                    onClick = { onIntent(AnimeDetailIntent.ClickTag(it)) },                    onLongClick = { onIntent(AnimeDetailIntent.LongClickTag(it)) }                )            }            ItemAnimeThemes(animeThemeState)            AnimeRelationInfo(animeList = animeDetailState.animeRelationInfo) {                onIntent(AnimeDetailIntent.ClickAnime(id = it.id, idMal = it.idMal))            }        }    }    if (state.isShowDialog) {        ItemSpoilerDialog(            message = state.dialogText,            onAnimeClick = { id, idMal -> onIntent(AnimeDetailIntent.ClickAnime(id, idMal)) },            onCharacterClick = { onIntent(AnimeDetailIntent.ClickChara(it)) },            onBrowserClick = { onIntent(AnimeDetailIntent.ClickLink(it)) },            onDismiss = { onIntent(AnimeDetailIntent.ClickDialogConfirm) }        )    }}@Composableprivate fun ItemAnimeThemes(animeTheme: AnimeThemeInfo?) {    if (animeTheme?.openingThemes != null && animeTheme.openingThemes.isNotEmpty()) {        AnimeThemeInfo(            title = "Opening Theme",            songList = animeTheme.openingThemes        )    }    if (animeTheme?.endingThemes != null && animeTheme.endingThemes.isNotEmpty()) {        AnimeThemeInfo(            title = "Ending Theme",            songList = animeTheme.endingThemes        )    }}@Composableprivate fun ItemLoading() {    AnimeGenreChips(list = List(3) { null }) { }    AnimeDescription(description = null, expanded = false) {}    AnimeScoreInfo(animeDetailInfo = null)    AnimeSummaryInfo(        animeDetailInfo = null,        onIntent = {}    )    AnimeThemeInfo(        title = null,        songList = List(3) { null }    )    AnimeThemeInfo(        title = null,        songList = List(3) { null }    )}@Composableprivate fun AnimeGenreChips(    list: List<String?>,    onIntent: (AnimeDetailIntent) -> Unit) {    FlowRow(        modifier = Modifier            .animateContentSize(),        horizontalArrangement = Arrangement.spacedBy(8.dp)    ) {        list.forEach { genre ->            AssistChip(                modifier = Modifier                    .shimmer(visible = genre == null),                onClick = {                    if (genre == null) return@AssistChip                    onIntent(AnimeDetailIntent.ClickGenre(genre))                }, label = {                    Text(text = genre ?: "Unknown")                }, colors = AssistChipDefaults.assistChipColors(                    containerColor = GENRE_COLOR[genre]?.color() ?: Color.Black,                    labelColor = Color.White                ), border = AssistChipDefaults.assistChipBorder(                    enabled = true,                    borderColor = GENRE_COLOR[genre]?.color() ?: Color.Black                )            )        }    }}@Composableprivate fun AnimeThemeInfo(    title: String?,    songList: List<String?>) {    Column(        modifier = Modifier            .padding(                top = 8.dp,                bottom = 16.dp,                start = 4.dp            )    ) {        Text(            modifier = Modifier                .shimmer(visible = title == null),            text = title ?: UiConst.TITLE_PREVIEW,            fontSize = 14.sp,            fontWeight = FontWeight.SemiBold        )        Spacer(modifier = Modifier.height(8.dp))        songList.forEach { themeTitle ->            Text(                modifier = Modifier                    .shimmer(visible = title == null),                text = themeTitle ?: UiConst.TITLE_PREVIEW,                fontSize = 13.sp            )        }    }}@Composableprivate fun AnimeRelationInfo(    animeList: List<AnimeRelationInfo>,    onClick: (animeInfo: AnimeInfo) -> Unit) {    LazyRow(        modifier = Modifier            .fillMaxWidth()            .wrapContentHeight(),        horizontalArrangement = Arrangement.spacedBy(4.dp),        contentPadding = PaddingValues(            start = 4.dp,            end = 8.dp,            bottom = 4.dp        )    ) {        items(            animeList,            key = { it.animeBasicInfo.id }        ) { animeInfo ->            ItemAnimeSmall(                item = animeInfo.animeBasicInfo            ) {                onClick(animeInfo.animeBasicInfo)            }        }    }}@Composableprivate fun AnimeSummaryInfo(    animeDetailInfo: AnimeDetailInfo?,    onIntent: (AnimeDetailIntent) -> Unit) {    Column(        modifier = Modifier            .fillMaxWidth()            .wrapContentHeight()            .padding(                start = 4.dp,                bottom = 16.dp            )    ) {        ItemAnimeInfoNonClick("Romaji", animeDetailInfo?.animeInfo?.title)        ItemAnimeInfoNonClick("English", animeDetailInfo?.titleEnglish)        ItemAnimeInfoNonClick("Native", animeDetailInfo?.titleNative)        ItemAnimeInfoNonClick("Format", animeDetailInfo?.animeInfo?.format)        if (animeDetailInfo?.episode.isNotEmptyValue) {            ItemAnimeInfoNonClick("Episode", "${animeDetailInfo?.episode}Ep")        }        if (animeDetailInfo?.duration.isNotEmptyValue) {            ItemAnimeInfoNonClick("Durations", "${animeDetailInfo?.duration ?: 0}Min")        }        if (animeDetailInfo?.startDate.isNotEmptyValue) {            ItemAnimeInfoNonClick("StartDate", animeDetailInfo?.startDate)        }        if (animeDetailInfo?.endDate.isNotEmptyValue) {            ItemAnimeInfoNonClick("EndDate", animeDetailInfo?.endDate)        }        if (animeDetailInfo != null && animeDetailInfo.animeInfo.seasonYear != 0) {            ItemAnimeInfoClickAble(                "Season",                "${animeDetailInfo.animeInfo.seasonYear} ${animeDetailInfo.animeInfo.season}",            ) {                onIntent(                    AnimeDetailIntent.ClickSeasonYear(                        season = animeDetailInfo.animeInfo.season,                        year = animeDetailInfo.animeInfo.seasonYear                    )                )            }        }        if (animeDetailInfo != null && animeDetailInfo.studioInfo?.id.isNotEmptyValue) {            ItemAnimeInfoClickAble(                "Studio",                animeDetailInfo.studioInfo!!.name,            ) {                onIntent(AnimeDetailIntent.ClickStudio(animeDetailInfo.studioInfo.id))            }        }    }}@Composableprivate fun ItemAnimeTags(    tags: List<TagInfo?>,    onClick: (String) -> Unit,    onLongClick: (String) -> Unit) {    var isShowSpoiler by remember { mutableStateOf(false) }    val unIncludeTags by remember { mutableStateOf(tags.filter { it?.isSpoiler == false }) }    val itemHeight by if (isShowSpoiler) {        if (tags.size % 2 == 0) {            remember { mutableIntStateOf(tags.size * (10 + 4)) }        } else {            remember { mutableIntStateOf((tags.size + 1) * (10 + 4)) }        }    } else {        if (unIncludeTags.size % 2 == 0) {            remember { mutableIntStateOf(unIncludeTags.size * (10 + 4)) }        } else {            remember { mutableIntStateOf((unIncludeTags.size + 1) * (10 + 4)) }        }    }    Column(        modifier = Modifier            .fillMaxWidth()            .padding(                top = 8.dp,                bottom = 16.dp,                start = 4.dp            )            .animateContentSize(                animationSpec = spring(                    dampingRatio = Spring.DampingRatioMediumBouncy,                    stiffness = Spring.StiffnessLow                )            )    ) {        Row(            modifier = Modifier                .fillMaxWidth(),            horizontalArrangement = Arrangement.SpaceBetween        ) {            Text(                modifier = Modifier                    .padding(bottom = 8.dp),                text = "Tags",                fontSize = 14.sp,                fontWeight = FontWeight.SemiBold            )            if (tags.any { it?.isSpoiler == true }) {                TextButton(onClick = { isShowSpoiler = !isShowSpoiler }) {                    Text(                        modifier = Modifier                            .padding(bottom = 8.dp),                        text = if (isShowSpoiler) {                            "Hide Spoiler Tag"                        } else {                            "Show Spoiler Tag"                        },                        fontSize = 14.sp,                        fontWeight = FontWeight.SemiBold                    )                }            }        }        LazyVerticalGrid(            modifier = Modifier                .fillMaxWidth()                .height(itemHeight.dp),            columns = GridCells.Fixed(2),            horizontalArrangement = Arrangement.spacedBy(16.dp)        ) {            if (isShowSpoiler) {                items(tags) { tagInfo ->                    if (tagInfo != null) {                        ItemTagInfo(                            tagInfo = tagInfo,                            onClick = { onClick(it) },                            onLongClick = { onLongClick(it) }                        )                    }                }            } else {                items(unIncludeTags) { tagInfo ->                    if (tagInfo != null) {                        ItemTagInfo(                            tagInfo = tagInfo,                            onClick = { onClick(it) },                            onLongClick = { onLongClick(it) }                        )                    }                }            }        }    }}@OptIn(ExperimentalFoundationApi::class)@Composableprivate fun ItemTagInfo(    tagInfo: TagInfo,    onClick: (String) -> Unit,    onLongClick: (String) -> Unit) {    Row(        modifier = Modifier            .fillMaxWidth()            .combinedClickable(                onClick = {                    onClick(tagInfo.name)                },                onLongClick = {                    if (tagInfo.desc != null) {                        onLongClick(tagInfo.desc!!)                    }                }            ),        horizontalArrangement = Arrangement.SpaceBetween    ) {        Text(            modifier = Modifier                .fillMaxWidth(0.6f),            text = tagInfo.name,            maxLines = 1,            fontSize = 12.sp,            color = if (tagInfo.isSpoiler) Red500 else Color.Black        )        Text(            modifier = Modifier                .fillMaxWidth(0.4f),            text = "${tagInfo.ranking}%",            maxLines = 1,            fontSize = 12.sp,            color = if (tagInfo.isSpoiler) Red500 else Color.Black        )    }}@Composableprivate fun ItemAnimeInfoClickAble(    title: String,    value: String,    onClick: () -> Unit = { }) {    Row(        modifier = Modifier            .fillMaxWidth()            .padding(horizontal = 4.dp, vertical = 8.dp)    ) {        Text(            text = "$title : ",            fontWeight = FontWeight.Bold,            fontSize = 14.sp,        )        Spacer(modifier = Modifier.weight(1f))        Text(            modifier = Modifier                .clickable { onClick() },            text = value,            fontWeight = FontWeight.Bold,            fontSize = 14.sp,            color = Red500        )    }}@Composableprivate fun ItemAnimeInfoNonClick(    title: String,    value: String?) {    Row(        modifier = Modifier            .fillMaxWidth()            .padding(horizontal = 4.dp, vertical = 8.dp)    ) {        Text(            text = "$title : ",            fontWeight = FontWeight.Bold,            fontSize = 14.sp,        )        Spacer(modifier = Modifier.weight(1f))        Text(            modifier = Modifier                .shimmer(value == null),            text = value ?: "Unknown",            fontWeight = FontWeight.Bold,            fontSize = 14.sp        )    }}@Composableprivate fun AnimeScoreInfo(animeDetailInfo: AnimeDetailInfo?) {    HorizontalDivider(        modifier = Modifier            .fillMaxWidth()            .padding(top = 8.dp)    )    Row(        modifier = Modifier            .fillMaxWidth()            .wrapContentHeight()            .padding(                top = 16.dp,                bottom = 16.dp            ),        horizontalArrangement = Arrangement.SpaceAround    ) {        val summaryList = listOf(            "Average" to "${animeDetailInfo?.animeInfo?.averageScore ?: 0}%",            "Mean" to "${animeDetailInfo?.meanScore ?: 0}%",            "Popularity" to animeDetailInfo?.popularScore.toCommaFormat(),            "Favourites" to animeDetailInfo?.animeInfo?.favourites.toCommaFormat()        )        summaryList.forEach {            Column(                horizontalAlignment = Alignment.CenterHorizontally            ) {                Text(                    modifier = Modifier                        .shimmer(visible = animeDetailInfo == null),                    text = it.second,                    fontSize = 14.sp,                    fontWeight = FontWeight.SemiBold                )                Text(                    modifier = Modifier                        .shimmer(visible = animeDetailInfo == null),                    text = it.first,                    fontSize = 14.sp,                    fontWeight = FontWeight.SemiBold                )            }        }    }    HorizontalDivider(        modifier = Modifier            .fillMaxWidth()            .padding(bottom = 8.dp)    )}@Composableprivate fun AnimeDescription(    expanded: Boolean,    description: String?,    onIntent: (AnimeDetailIntent) -> Unit) {    Column(        modifier = Modifier            .padding(                top = 8.dp,                bottom = 8.dp,                start = 4.dp            )            .animateContentSize(                animationSpec = spring(                    dampingRatio = Spring.DampingRatioMediumBouncy,                    stiffness = Spring.StiffnessLow                )            ),        horizontalAlignment = Alignment.CenterHorizontally    ) {        val desc = description ?: stringResource(Res.string.lorem_ipsum)        val convertedText = remember(desc) {            htmlToAnnotatedString(                desc,                linkInteractionListener = { link ->                    if (link is LinkAnnotation.Url) {                        if (isHrefContent(link.url)) {                            getIdFromLink(                                link = link.url,                                onAnime = {                                    onIntent(                                        AnimeDetailIntent.ClickAnime(                                            id = it,                                            idMal = it                                        )                                    )                                },                                onChara = { onIntent(AnimeDetailIntent.ClickChara(id = it)) },                                onBrowser = { onIntent(AnimeDetailIntent.ClickLink(url = it)) }                            )                            return@htmlToAnnotatedString                        }                        onIntent(AnimeDetailIntent.ClickSpoiler(link.url))                    }                }            )        }        if (expanded) {            Text(                modifier = Modifier                    .shimmer(visible = description == null),                text = convertedText            )        } else {            Text(                modifier = Modifier                    .shimmer(visible = description == null),                text = convertedText,                maxLines = 5,                overflow = TextOverflow.Ellipsis,            )        }        Button(            modifier = Modifier                .padding(vertical = 8.dp),            onClick = { onIntent(AnimeDetailIntent.ClickExpand) }        ) {            if (expanded) {                Icon(                    imageVector = Icons.Filled.ArrowUpward,                    contentDescription = null                )            } else {                Icon(                    imageVector = Icons.Filled.ArrowDownward,                    contentDescription = null                )            }        }    }}